generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Book {
  book_id         String           @id @db.VarChar(100)
  author          String?          @db.VarChar(100)
  title           String?          @db.VarChar(100)
  subtitle        String?          @db.VarChar(100)
  description     String?          @db.VarChar(1000)
  release_year    Int?
  bookshelf_books BookshelfBooks[] // Define the one-to-many relationship

  @@index([book_id])
}

model BookshelfBooks {
  book_id           String        @db.VarChar(100)
  user_id           Int
  bookshelf_id      Int
  bookshelf_name    String
  book_thoughts     String?       @db.VarChar(1000)
  book_private      Boolean?
  thoughts_private  Boolean?
  book_status       String        @db.VarChar(100)
  date_added        DateTime      @default(now())
  date_modified     DateTime      @updatedAt
  google_books_link String        @db.VarChar(100)
  book              Book          @relation(fields: [book_id], references: [book_id])
  user_bookshelf    UserBookshelf @relation(fields: [bookshelf_id, user_id], references: [bookshelf_id, user_id])
  Users             Users?        @relation(fields: [user_id], references: [user_id])

  @@id([book_id, bookshelf_id])
  @@index([book_id], map: "bookshelf_books_books_FK")
  @@index([user_id], map: "bookshelf_books_users_FK")
  @@index([bookshelf_id], map: "bookshelf_books_user_bookshelf_FK")
  @@map("bookshelf_books")
}

model UserBookshelf {
  bookshelf_id    Int              @id @default(autoincrement())
  bookshelf_name  String           @db.VarChar(100)
  user_id         Int
  date_added      DateTime         @default(now())
  date_modified   DateTime         @updatedAt
  bookshelf_books BookshelfBooks[] // Define the one-to-many relationship
  users           Users            @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([user_id, bookshelf_name], name: "user_id_bookshelf_name")
  @@unique([bookshelf_id, user_id])
  @@index([user_id], map: "user_bookshelf_users_FK")
}

model Users {
  user_id          Int              @id @default(autoincrement())
  user_first_name  String?          @db.VarChar(100)
  user_family_name String?          @db.VarChar(100)
  user_full_name   String?          @db.VarChar(100)
  user_picture     String?          @db.VarChar(500)
  user_email       String           @unique @db.VarChar(100)
  date_added       DateTime         @default(now())
  oauth_provider   String?          @db.VarChar(20)
  user_bookshelf   UserBookshelf[] // Define the one-to-many relationship
  bookshelf_books  BookshelfBooks[]
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String   @db.VarChar(300)
  expiresAt DateTime
}
